#!/bin/bash

SCRIPTDIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
SAGEDIR=${SAGEDIR:-`cd $SCRIPTDIR/.. && pwd -P`}
BASEDIR=$PWD
NODEDIR=$SAGEDIR
SAGECONFDIR=${SAGECONFDIR:-$BASEDIR/conf}
SAGESVCCONF=${SAGESVCCONF:-$SAGECONFDIR/services.json}
LOGDIR=$BASEDIR/logs
PIDFILE=$LOGDIR/sage.pid
SVCPIDFILE=$LOGDIR/service.%%.pid
INSTALL_LOG=$LOGDIR/install.log
GYP=$SAGEDIR/node_modules/.bin/node-gyp
DEFAULT_HOSTNAME=0.0.0.0
WHOAMI=`whoami`
HEADING_COLOR=2

SAGE_USAGE='sage [options] <command> [<arguments>]
    
Available commands:
    check       Ensure that Sage is ready to go
    env         Get/Set the environment
    info        Some useful information about the setup
    examples    Install example data
    help        This command
    install     Install dependencies required by Sage
    open        Open up an Sage session (Mac only, for now)
    restart     Restart Sage
    services    Lists available services
    start       Start Sage
    status      Check whether or not Sage is running
    stop        Stop Sage
    
"sage help <command>" shows help on specific commands.'


mkdir -p $LOGDIR

# ===========================================================================
# Private utility functions

function _error {
    local message=$1
    local details=$2
    printf "\e[;1mError:\e[0m %s\n" "$message"
    if [[ "$details" ]]; then
        printf "\n\e[;1mDetails:\e[0m %s\n" "$details"
    fi
}

function _abspath {
    echo $(cd $(dirname $1); pwd)/$(basename $1)
}

function _sage_env {
    local env=$1
    if [ -n "$env" ]; then
        echo "$env" > $SAGEDIR/.sageenv
    else
        echo $(<$SAGEDIR/.sageenv)
    fi
}

function _json_flatten {
    local __json_flatten_result=$1
    local jsonfile=$2
    local key=$3
    local fields=$4
    local filter=$5
    local stderr=$(mktemp -t XXXX)
    local jf_stdout=$(cat $jsonfile | node -e '
        var p = process, f = p.argv[2].split(" ");
        p.stdin.resume();
        p.stdin.on("data", function (j) { 
            var o = JSON.parse(j);
            o[p.argv[1]].forEach(function (e) {
                if (!p.argv[3] || e["name"] == p.argv[3])
                    console.log(f.map(function (l) { return e[l] || "undefined"; }).join(" "));
            });
        });
        p.stdin.on("error", function (e) { console.error(e); });
    ' $key "$fields" $filter 2> $stderr)
    local jf_stderr=$(cat $stderr); rm $stderr
    if [[ "$jf_stderr" ]]; then
        _error "Could not understand contents of '$jsonfile'" "$jf_stderr"
        exit 1
    fi
    eval $__json_flatten_result="'$jf_stdout'"
}

function _json_lookup {
    local __json_lookup_result=$1
    local jsonfile=$2
    local fields=$3
    local stderr=$(mktemp -t XXXX)
    local jl_stdout=$(cat $jsonfile | node -e '
        var f = process.argv[1].split(" ");
        process.stdin.resume();
        process.stdin.on("data", function (j) {
            var o = JSON.parse(j);
            for (i in f) { o = o[f[i]]; }
            console.log(o);
        });
        process.stdin.on("error", function (e) { console.error(e) });
    ' "$fields" 2>$stderr)
    local jl_stderr=$(cat $stderr); rm $stderr
    
    if [[ "$jl_stderr" ]]; then
        _error "Could not understand contents of '$jsonfile'" "$jl_stderr"
        exit 1
    fi
    eval $__json_lookup_result="'$jl_stdout'"
}

function _running_pid {
    local pidfile=$1
    if [ -e "$pidfile" ]; then
        xargs ps u -p < $pidfile | awk '!/PID/ {print $2}'
    fi
}

function _sage_pid {
    _running_pid $PIDFILE
}

function _svc_pidfile {
    local svc=$1
    echo $SVCPIDFILE | sed "s/%%/$svc/"
}

function _start_services {
    local svc=$1
    if [ ! -e "$SAGESVCCONF" ]; then
        echo "Service configuration [$SAGESVCCONF] cannot be found!" 2> /dev/stderr
        sage_cmd_help
        exit 1
    fi
    local services=$(sage_cmd_services $svc)
    local priverror=$(echo "$services" | while read line; do
        local service=($line)
        if [ "${service[0]}" -le 1024 -a $WHOAMI != "root" ]; then
            echo "Service '${service[1]}' requires root privileges."
        fi
    done)
    if [ -n "$priverror" ]; then
        echo $priverror
        _error "Please rerun 'sage start' as root!"
        exit 1
    fi

    echo "Starting services..."
    echo "$services" | (while read line
        do
            local service=($line)
            local port=${service[0]}
            local name=${service[1]}
            local controller=`_abspath ${service[2]}`
            local log=$LOGDIR/$name.log
            rm -f "$log"
            local pidfile=`_svc_pidfile $name`
            local pid=`_running_pid $pidfile`
            if [ $controller != "undefined" ]; then
                node $SAGEDIR/scripts/start-service.js \
                    --port    $port \
                    --service $controller \
                    --name    $name \
                    --log     "$log" &
                echo $! > $pidfile
            fi
        done
        wait
    ) &
    sleep 1
    sagepid=$!
}

function _start_all_sage {
    local pid=`_sage_pid`
    if [ -n "$pid" ]; then
        echo "Sage is already running (pid `cat $PIDFILE`)"
    else
        _start_services
        if [ -n "$sagepid" ]; then
            echo $sagepid > $PIDFILE
            sage_cmd_status
        else
            echo "Error launching Sage"
        fi
    fi
}

function _status_line {
    printf "%-20s %-10s %s\n" $1 $2 $3
}

function _find_service {
    local svc=$1
    local service=(`sage_cmd_services $svc`)
    echo "${service[*]}"
}

function _service_url {
    local svc=($@)
    echo "http://${svc[3]}:${svc[0]}"
}

function _service_status {
    local service=($@)
    local name=${service[1]}
    local pidfile=`_svc_pidfile $name`
    if [ ! -e "$pidfile" ]; then
        echo "Service '$name' is not running."
        return
    fi
    _status_line $name `_running_pid $pidfile` `_service_url ${service[@]}`
}

# Ensure privileges for helpful output
function _kill {
    local pid=$1
    local name=$2
    if test -z "$pid"; then
        echo "Nothing to kill."
        return
    fi
    if test $WHOAMI == "root"; then
        kill $pid
        return
    fi
    local owner=$(ps -o user $pid | grep -v '^USER')
    if test -n "$owner"; then
        if test $WHOAMI == $owner; then
            kill $pid 2> /dev/null
        else
            _error "Process $pid is owned by $owner, not you ($WHOAMI)."
            echo "Rerun as $owner (example: 'sudo sage stop')"
            exit 1
        fi
    fi
}

# ===========================================================================
# Sage commands

# ---------------------------------------------------------------------------
# SAGE START
# ---------------------------------------------------------------------------
_help_start="sage start [<service>]

Starts Sage services. With no arguments, starts all services.
    <service>   Start a specific service"
function sage_cmd_start {
    local svc=$1
    if [ -n "$svc" ]; then
        if [ -z "`sage_cmd_services $svc`" ]; then
            echo "Service $svc is not a valid service!"
            exit 1
        fi
        pidfile=`_svc_pidfile $svc`
        pid=`_running_pid $pidfile`
        if [ -n "$pid" ]; then
            echo "Service $svc is already running!"
            return
        fi
        _start_services $svc
        sage_cmd_status $svc
    else
        _start_all_sage
    fi
}

# ---------------------------------------------------------------------------
# SAGE STOP
# ---------------------------------------------------------------------------
_help_stop="sage stop [<service>]

Stops Sage services. With no arguments, stops all of Sage.
    <service>   Stop a specific service"
function sage_cmd_stop {
    local svc=$1
    if [ -n "$svc" ]; then
        if [ -z "`sage_cmd_services $svc`" ]; then
            echo "Service $svc is not a valid service!"
            exit 1
        else
            pidfile=`_svc_pidfile $svc`
            if [ ! -e "$pidfile" ]; then
                echo "Service $svc is not running!"
                return
            fi
            _kill `_running_pid $pidfile` 
            rm -f $pidfile
            echo "Stopped service $svc."
        fi
    else
        local sagepid=`_sage_pid`
        if [ -z "$sagepid" ]; then
            echo "Sage does not appear to be running. Nothing to stop."
        else
            for pidfile in `_svc_pidfile '*'`; do
                local pid=`_running_pid $pidfile`
                if [ -n "$pid" ]; then
                    _kill $pid
                fi
            done
            _kill $sagepid
        fi
        rm -f $PIDFILE `_svc_pidfile '*'`
    fi 
}

# ---------------------------------------------------------------------------
# SAGE INSTALL
# ---------------------------------------------------------------------------
_help_install="sage install [-q]

Installs various components and dependencies required by Sage. All output
from the various installations is redirected to
    $INSTALL_LOG
    
Options:
    -q          Suppress friendly messages to the shell
"
function sage_cmd_install {
    local verbose=1
    while getopts "q" opt; do
        case $opt in
            q) verbose=0;;
            *)
                echo "'sage install' does not support the -$opt option!"
                sage_cmd_help install
                ;;
        esac
        shift
    done

    cd $SAGEDIR
    cat <<LOG_HEADER >> $INSTALL_LOG
=======================================
Installation - $component - `date`

LOG_HEADER
    # Fetch git-managed modules
    
    [ "$verbose" -eq 1 ] && echo "Installing Git modules..."
    git submodule update --recursive --init 2>&1 >> $INSTALL_LOG

    [ "$verbose" -eq 1 ] && echo "Installing Node modules..."
    # Install Node.js dependencies
    cd $NODEDIR
    npm install 2>&1 | grep -v "No repository field" >> $INSTALL_LOG
}

# ---------------------------------------------------------------------------
# SAGE HELP
# ---------------------------------------------------------------------------
_help_help="sage help [<command>]

Provides help for commands. With no arguments, shows brief help for each 
command.

    <command>   Specific command to get help for"
function sage_cmd_help {
    local cmd=$1
    if [ -n "$cmd" ]; then
        if [ -z "$(declare -f sage_cmd_$cmd)" ]; then
            echo "There's no command called '$cmd'"
        else
            eval "help_message=\$_help_$cmd"
            if [ -z "$help_message" ]; then
                echo "No help currently available for 'sage $cmd'"
            else
                cat <<HELP
$help_message
HELP
            fi
        fi
        exit 0
    fi
    cat <<HELP
$SAGE_USAGE
HELP
}

# ---------------------------------------------------------------------------
# SAGE ENV
# ---------------------------------------------------------------------------
_help_env="sage env [<environment>]

Get or set the Sage environment. The environment indicates whether Sage is used 
in production or development mode. With no argument, just lists the current 
environment. With an argument, sets that environment and any associated parameters.

<environment> can be:

    dev         Use a development environment
    prod        Use a production environment"
function sage_cmd_env {
    local env=$1
    if [ -n "$env" ]; then
        case $env in
            dev)
                _sage_env dev
                ;;
            prod)
                _sage_env prod
                ;;
            *)
                echo "The environment '$env' is not supported"
                exit 1
                ;;
        esac
        echo "Set the environment to '`_sage_env`'"
    else
        env=`_sage_env`
        if [ -z "$env" ]; then
            env=dev
            _sage_env $env
        fi
        echo "The current environment is '$env'"
    fi
}

# ---------------------------------------------------------------------------
# SAGE OPEN
# ---------------------------------------------------------------------------
_help_open="sage open [<service>]

Opens a browser window with the Sage website. This option is currently only 
supported by Mac (Srsly, why would you use anything else?).

    <service>   The web service to open in a browser (default: 'proxy')"
function sage_cmd_open {
    local svc=$1
    test -z "svc" && svc='proxy'
    local service=`sage_cmd_services $svc`
    if [ -z "$service" ]; then
        echo "No such service to open ('$svc')!"
        exit 1
    fi
    open `_service_url $service`
}

function _status_header {
    tput setaf $HEADING_COLOR
    _status_line 'SERVICE' 'PID' 'URL'
    tput sgr0
}

# ---------------------------------------------------------------------------
# SAGE STATUS
# ---------------------------------------------------------------------------
_help_status="sage status [<service>]

Shows the status of running services.

    <service>   Show status only for this service
    
See also: 'sage services'"
function sage_cmd_status {
    local svc=$1
    if [ -n "$svc" ]; then
        local service=`sage_cmd_services $svc`
        if [ -z "$service" ]; then
            echo "Service '$svc' is not a valid service!"
            sage_cmd_help status 
        fi
        _status_header
        _service_status $service
    else
        pid=`_sage_pid`
        if [ -z "$pid" ]; then
            echo "Sage is not running."
        else
            echo "Sage is running as process $pid with the following services:"
        fi
        sage_cmd_services | while read line
        do
            local service=($line)
            local pid=$(_running_pid $(_svc_pidfile ${service[1]}))
            if [ -n "$pid" ]; then
                if [ -z "$service_running" ]; then
                    _status_header
                    local service_running=1
                fi
                _service_status ${service[@]}
            fi
        done
    fi
}

# ---------------------------------------------------------------------------
# SAGE SERVICES
# ---------------------------------------------------------------------------
_help_services="sage services [<service>]

Lists available service currently configured with Sage (not *running* services).

    <service>   Only show configuration for specified service

See also: 'sage status'"
function sage_cmd_services {
    local name=$1
    if [ ! -e "$SAGESVCCONF" ]; then
        echo "File $SAGESVCCONF does not exist!" > /dev/stderr
        exit 1
    fi
    local hostname;
    _json_lookup hostname $SAGESVCCONF 'settings hostname'
    [ -z "$hostname" ] && hostname=$DEFAULT_HOSTNAME
    local services
    _json_flatten services $SAGESVCCONF services \
        'port name controller host' "$name"
    if [ -z "$services" ]; then
        [ -n "$name" ] && _error "Service '$name' is not configured."
        return
    fi
    local outfmt='%-5s %-18s %-25s %-25s %s\n'
    # If called directly from command-line, show header
    if [ "$cmd" == "services" ]; then
        tput setaf $HEADING_COLOR
        printf "$outfmt" PORT NAME FILE ADDRESS
        tput sgr0
    fi
    echo "$services" | while read line; do
        local svc=($line)
        if [ "${svc[3]}" == "undefined" ]; then
            svc[3]=$hostname
        fi
        printf "$outfmt" ${svc[@]}
    done
}

# ---------------------------------------------------------------------------
# SAGE RESTART
# ---------------------------------------------------------------------------
_help_restart="sage restart [<service>]

Restarts Sage services. With no arguments, restarts all services.

    <service>   Restart a specific service"
function sage_cmd_restart {
    sage_cmd_stop $@
    sage_cmd_start $@
}


# ---------------------------------------------------------------------------
# SAGE EXAMPLES
# ---------------------------------------------------------------------------
_help_examples="sage examples

Install example data."
function sage_cmd_examples {
    local overwrite=$1
    EXAMPLEDIR=./examples
    cd $SAGEDIR
    git submodule update --init -- $EXAMPLEDIR > /dev/null
    cd $EXAMPLEDIR
    if [ -z "$(which mongorestore 2> /dev/null)" ]; then
        _error "Cannot find the command 'mongorestore', required for loading
              the example data"
        exit 1
    fi
    dbs=$(echo 'show dbs' | mongo --quiet | cut -f1 | grep -v '^bye$')
    for f in ./mongo/*; do
        db=$(basename $f)
        if [ "$(echo $dbs | grep -c "$db")" -eq 1 -a \
            "$overwrite" != "-f" ]; then
            echo "Database '$db' already exists. Use '-f' to overwrite."
        else
            echo "Loading database '$db'"
            mongorestore --drop $f
        fi
    done
}

# ---------------------------------------------------------------------------
# SAGE CHECK
# ---------------------------------------------------------------------------
_help_check="sage check [<component>]

Checks to ensure the Sage installation is complete and ready to go. With no
argument, runs all component checks.

The following modules are supported:

    unit        Only run the Sage unit tests
    files       Only check file structure
    integration Only run Sage integration tests"
function sage_cmd_check {
    local component=$1
    
    if [ -n "$component" ]; then
        if [ "$component" != "unit" -a \
             "$component" != "files" -a \
             "$component" != "integration" ]; then
             _error "'$component' is not a valid check component"
             sage_cmd_help check
         fi
    else
        component="all"
    fi

    cd $SAGEDIR
    local errnum=0
    declare -a errors=()
    function add_error {
        errors[$errnum]="$1"
        errnum=$(($errnum+1))
    }
    
    if [ "$component" == "all" -o "$component" == "files" ]; then

        # Ensure services.json is valid JSON
        if [ -e "$SAGESVCCONF" -a \
            -n "$( (/usr/bin/python -mjson.tool <$SAGESVCCONF>/dev/null) 2>&1)" ]
        then
            add_error "Service configuration '${SAGESVCCONF##$BINDIR/}' is
                       not valid JSON."
        fi

        # Ensure 'logs' is writable
        if [ -e "$LOGDIR" -a ! -w "$LOGDIR" ]; then
            add_error "Log directory '${LOGDIR##$BINDIR/}' 
                       exists but is not writable."
        fi

        # Check for required executables
        for executable in node npm mongo; do
            if [ -z "$(which $executable 2> /dev/null)" ]; then
                add_error "Command '$executable' was not found in your path."
            fi
        done

        if [ "$errnum" -gt 0 ]; then
            tput bold; echo "Errors:"; tput sgr0
            for ((i = 0; i < ${#errors[@]}; i++)); do
                echo ${errors[$i]}
            done
            exit 0;
        else
            echo "Files lookin' good."
        fi
    fi
    
    if [ "$component" == "all" -o \
         "$component" == "unit" -o \
         "$component" == "integration" ]; then
        make test
    fi
}

function prkeyval () {
    key=$1
    val=$2
    indent=$3
    tput bold; printf "%-${indent}s" "$1"; tput sgr0;
    echo $2
}


# ---------------------------------------------------------------------------
# SAGE INFO
# ---------------------------------------------------------------------------
_help_check="sage info

Provides general info about the installation."
function sage_cmd_info {
    indent=18
    _json_lookup SAGEVERSION $SAGEDIR/package.json version
    prkeyval "Sage directory:" "$SAGEDIR"      $indent
    prkeyval "Sage script:"    "$0"            $indent
    prkeyval "Configuration:"  "$SAGECONFDIR"  $indent
    prkeyval "Environment:"    "$SAGEENV"      $indent
    prkeyval "Version:"        "$SAGEVERSION"  $indent
}

# 'MAIN'
cmd=$1
if [ `declare -f sage_cmd_$cmd | wc -l` -gt 1 ]; then
    shift
    eval "sage_cmd_$cmd \$@"
else
    echo "Unrecognized command. Try 'sage help'"
fi
